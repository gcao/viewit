h1. viewit

 Description goes here.

h2. Documentation

h3. Idea - separate data and presentation logic in web page

 * Store data in a data structure which is independent from html/css
 * Data are passed to a renderer which constructs html document and css to achieve
   expected look and feel
 * Forms are part of data
 * Literal data that contains text with link will be splitted into
   array, e.g. "I went to &lt;a href='#'>New York&lt;/t>." becomes 
   ["I went to ", Link.new("New York", "#"), "."]
 * HTML can be constructed on server side or on client side with help of Javascript
 * Data can be stored in session and in browser(as javascript variable)
 * If Data are stored, it is recommended to keep them up to date on client operation,
   this can be basis of one page web application.
 * Data can be easily navigated and each item can be uniquely identified.
 * In generated html, data item id should be inserted (using HTML5 data property
   might be good)
 * Mapping between data item and DOM can be maintained (is this required for some
   operations?)
 * Sub model can be referenced in other part of the data model, e.g.
<pre>
  {
    "user": {
      "ref": "user.test",
      "username": "test"
    },
    "comment": {
      "author": {"deref": "user.test"}
    }
  }
</pre>
 * All data item should be navigatable
 * MVC - model contains data, model is presented in view, controller is mostly driven by
   user doing something on the view(controller action can also be initiated spontaneously).
 * Should support component tree architecture, top component is the web page itself.
   Sub components are responsible for parts of the page. Ideally they can be embedded
   in a traditional web page.
 * Since one model can be used in multiple places in views, it's probably a good idea
   to implement event(e.g. updated, created, deleted) and event handler to update multiple
   views at the same time.

h3. Prototype of above idea

 * Pick a typical web page (not too simple but not too complex either) and extract
   all its text into a JSON format data structure (including url of links and images
   except decorational or background images)
 * Write ruby code to re-build the page (the purpose is to have same DOM structure)
 * Refactor ruby code to investigate benefits and potentials of this idea

h2. Note on Patches/Pull Requests
 
 * Fork the project.
 * Make your feature addition or bug fix.
 * Add tests for it. This is important so I don't break it in a
   future version unintentionally.
 * Commit, do not mess with rakefile, version, or history.
   (if you want to have your own version, that is fine but bump version in a commit by itself I can ignore when I pull)
 * Send me a pull request. Bonus points for topic branches.

h2. Copyright

 Copyright (c) 2010 Guoliang Cao. See LICENSE for details.
